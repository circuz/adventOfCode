# -*- coding: utf-8 -*-
"""
Created on Sun Dec 19 10:43:34 2021

@author: August
"""
import math
import copy
""
s_numbers = [
[[5,[[8,5],8]],[[9,3],[0,3]]]
,[[[8,[3,6]],[0,[1,2]]],[[[4,1],4],[7,[5,8]]]]
,[[[[2,0],6],[4,8]],[8,[3,0]]]
,[[[[8,2],[8,3]],[[0,9],5]],3]
,[[[[4,4],[2,3]],8],[[1,[3,8]],[8,4]]]
,[[[2,[1,0]],[[3,2],0]],[9,2]]
,[[[0,4],[[9,8],[6,6]]],3]
,[[[6,[6,2]],[[4,5],3]],[0,7]]
,[[[[2,8],4],[[1,2],[3,8]]],9]
,[[[3,[7,6]],[9,9]],[[8,9],[[6,2],[3,4]]]]
,[0,[4,[[4,1],8]]]
,[[[[3,3],[8,7]],[9,7]],[[7,6],4]]
,[[1,[[0,6],4]],[[5,[3,3]],6]]
,[[[0,4],7],4]
,[[[2,[1,7]],8],[6,[2,[8,7]]]]
,[[[9,7],[[2,5],[7,9]]],[1,[4,[8,6]]]]
,[[[[3,7],6],[[1,6],[5,4]]],[0,[6,2]]]
,[9,5]
,[[[[6,1],[4,5]],[[4,2],8]],[[5,[5,1]],[[7,3],6]]]
,[9,[9,[[7,4],[6,9]]]]
,[3,[[9,2],9]]
,[[[[1,7],6],[3,[9,7]]],[[6,[4,3]],[[5,6],5]]]
,[[[[0,6],[7,9]],[[2,8],2]],[5,[3,[4,9]]]]
,[0,[[[1,8],7],[9,4]]]
,[5,[0,[[4,5],6]]]
,[[[[7,9],[4,9]],[7,[7,5]]],[6,[[1,6],[8,7]]]]
,[[[4,[0,1]],[[9,0],[8,1]]],[[0,7],[5,[0,4]]]]
,[0,1]
,[[[[7,7],[0,7]],8],[[3,[4,2]],[6,6]]]
,[[[[7,8],[4,3]],[7,[7,0]]],[3,[2,3]]]
,[[[[6,9],[3,2]],[[4,7],2]],[[3,[7,5]],[[3,3],3]]]
,[7,[[[6,7],[1,3]],9]]
,[[[[2,9],[2,1]],[3,[9,9]]],[1,[[0,7],[2,4]]]]
,[[7,4],[[[0,0],5],[[2,4],5]]]
,[[[[2,9],8],[3,4]],[6,[[8,7],[4,3]]]]
,[[[8,3],0],[4,[[6,7],5]]]
,[[[6,[4,1]],[[1,1],[0,4]]],[[[6,2],[8,6]],[5,2]]]
,[9,[[[5,6],0],[[7,2],3]]]
,[7,[[[6,6],[1,7]],8]]
,[[1,[9,[6,2]]],[[4,0],[[7,7],[4,2]]]]
,[[[5,[5,9]],[0,[7,2]]],[[3,3],6]]
,[[5,[3,6]],[[0,[8,4]],[6,[5,5]]]]
,[[[0,5],[[8,7],[0,3]]],[[[4,1],[6,2]],[[3,2],[2,7]]]]
,[[[6,9],5],[[7,3],[[5,0],[2,2]]]]
,[[3,5],[[1,[3,4]],[2,[5,3]]]]
,[[9,9],[4,6]]
,[[[[6,4],[3,7]],[3,8]],[3,[2,[3,7]]]]
,[[4,[[1,1],6]],[7,[[1,1],6]]]
,[[[[6,4],3],9],2]
,[[[[8,1],3],7],[4,[9,1]]]
,[4,[[[7,7],6],8]]
,[[[7,5],[8,1]],[[6,[6,5]],[6,7]]]
,[[8,[3,[1,3]]],[2,[[6,1],[0,5]]]]
,[9,[[8,6],0]]
,[[8,[1,5]],[[[6,4],6],1]]
,[2,[[3,[4,6]],[[2,9],[6,4]]]]
,[[[[0,9],[2,0]],[[2,4],7]],[[[7,1],3],[7,9]]]
,[[[3,6],[[6,6],1]],[[[0,5],[6,8]],5]]
,[[[4,5],[[5,1],0]],[3,[[3,1],[2,8]]]]
,[[[[9,0],[7,6]],5],[6,[[0,3],1]]]
,[[[1,4],[5,7]],[[9,[3,8]],3]]
,[[[7,7],1],[[[5,0],[4,0]],8]]
,[[[[0,9],[0,6]],[[5,8],[7,4]]],2]
,[[[[0,2],1],[[4,8],0]],[4,[[8,7],[9,1]]]]
,[[[1,[2,0]],[[8,4],[0,0]]],5]
,[[[9,[8,1]],[[1,1],[4,2]]],[9,[7,[6,9]]]]
,[[[[0,2],[1,5]],[[9,2],[8,7]]],[[6,8],[6,0]]]
,[[[3,[6,7]],[[9,8],[6,9]]],[8,[[4,6],5]]]
,[[[9,[1,5]],[[4,8],9]],2]
,[[[0,[1,5]],0],0]
,[[[[4,1],4],[4,[7,4]]],[[[3,9],9],3]]
,[[[9,7],[[8,7],[0,0]]],[[[0,0],3],3]]
,[[9,[[2,0],6]],[[8,6],[5,4]]]
,[2,[6,1]]
,[[7,[1,[9,5]]],[[[7,8],[1,0]],[6,3]]]
,[[[[2,3],1],[7,3]],[[[1,5],[2,2]],[[6,3],7]]]
,[4,6]
,[[[[4,0],1],2],[[[0,5],8],[8,[0,4]]]]
,[[5,[7,0]],[[[4,5],[0,2]],5]]
,[[[5,[3,1]],[[8,4],[4,9]]],[2,[[4,8],9]]]
,[[[0,7],2],[[[2,5],8],[0,[5,3]]]]
,[[[[2,2],[8,1]],[8,[1,3]]],[6,7]]
,[[[9,2],[[4,8],[7,1]]],[[[5,2],7],[5,8]]]
,[[[2,8],[[3,6],[8,3]]],[[0,5],6]]
,[[[3,[7,6]],[4,[5,2]]],6]
,[[7,[[5,2],8]],[1,[8,[8,3]]]]
,[[[[8,9],7],[[1,1],0]],[[3,6],[[7,8],9]]]
,[[4,[[4,2],[7,9]]],[[8,9],[8,8]]]
,[[[5,5],[9,[0,7]]],[[[5,8],8],4]]
,[[8,[[4,4],[0,0]]],[[2,1],[[2,5],3]]]
,[[6,[[4,3],[1,6]]],0]
,[[[4,[1,6]],2],[[0,7],1]]
,[[[6,[9,9]],[4,8]],[[[1,1],9],[4,[1,7]]]]
,[[[[2,1],6],[[3,8],[2,2]]],[9,[7,6]]]
,[[0,[[1,0],9]],[8,[0,6]]]
,[[[8,[3,4]],[[6,7],[9,9]]],[[7,[6,8]],[[7,7],[6,8]]]]
,[4,[[[4,5],[4,4]],[5,[9,0]]]]
,[[[[8,2],7],[6,5]],2]
,[[9,7],[4,[[5,3],7]]]
,[[[[6,5],0],1],[[[5,8],[3,9]],[[9,4],[8,3]]]]
]
""
def mycopy(pair):
    return([x for x in pair])

def explode(s_number,pair):
    length = len(pair)
    s_pair = s_number
    for i in range(length):
        s_pair = s_pair[pair[i]]
    s_p_0 = s_pair[0]
    s_p_1 = s_pair[1]
    s_pair = s_number
    for i in range(length-1):
        s_pair = s_pair[pair[i]]
    s_pair[pair[-1]] = 0
    
    
    pair0 = mycopy(pair)
    if sum(pair0) > 0:
        for i in range(1,length+1):
            pair0[-i] = abs(1-pair0[-i])
            if pair0[-i] == 0:
                break
    pair0.append(1)
    pair0.append(1)
    
    pair1 = mycopy(pair)     
    if sum(pair1) < 4:
        for i in range(1,length+1):
            pair1[-i] = abs(1-pair1[-i])
            if pair1[-i] == 1:
                break
    pair1.append(0)
    pair1.append(0)
                
    
    s_pair0 = s_number
    s_pair1 = s_number
    if sum(pair) > 0:
        for i in range(length+2):
            if type(s_pair0[pair0[i]]) != int:
                s_pair0 = s_pair0[pair0[i]]
            else:
                break
        if type(s_pair0[pair0[i]]) == int:
            s_pair0[pair0[i]] += s_p_0
        
    if sum(pair) < 4:
        for i in range(length+2):
            if type(s_pair1[pair1[i]]) != int:
                s_pair1 = s_pair1[pair1[i]]
            else:
                break
        s_pair1[pair1[i]] += s_p_1
    
    #print("s_number: " + str(s_number))
    return(s_number)


def split(s_number,pair):
    num = s_number
    num_old = [0]
    for i in range(len(pair)):
        num = num[pair[i]]
        if type(num) == int:
            num_old[pair[i]] = [math.floor(num/2),math.ceil(num/2)]
        else:
            num_old = num
    return("I splat!")

def check(s_number):
    # 0,0 = fine
    # 1,[] = split
    # 2,[] = explode
    
    for pair_1 in s_number:
        if type(pair_1) == list:
            for pair_2 in pair_1:
                if type(pair_2) == list:
                    for pair_3 in pair_2:
                        if type(pair_3) == list:
                            for pair_4 in pair_3:
                                if type(pair_4) == list:
                                    return(2,[s_number.index(pair_1),pair_1.index(pair_2),pair_2.index(pair_3),pair_3.index(pair_4)])
                                
    for pair_1 in s_number:
        if type(pair_1) == list:
            for pair_2 in pair_1:
                if type(pair_2) == list:
                    for pair_3 in pair_2:
                        if type(pair_3) == list:
                            for pair_4 in pair_3:
                                if pair_4 > 9:
                                    return(1,[s_number.index(pair_1),pair_1.index(pair_2),pair_2.index(pair_3),pair_3.index(pair_4)]) 
                        elif pair_3 > 9:
                            return(1,[s_number.index(pair_1),pair_1.index(pair_2),pair_2.index(pair_3)]) 
                elif pair_2 > 9:
                    return(1,[s_number.index(pair_1),pair_1.index(pair_2)]) 
        elif pair_1 > 9:
            return(1,[s_number.index(pair_1)]) 
    return(0,0)

def add(s_num_0,s_num_1):
    if s_num_0 == 0:
        return(s_num_1)
    s_new = [s_num_0,s_num_1]
    while check(s_new) != (0,0):
        #print("check: " + str(s_new))
        what,where = check(s_new)
        if what == 2:
            explode(s_new, where)
        elif what == 1:
            split(s_new, where)
    return(s_new)

def magnitude(s_number):
    if type(s_number) == int:
        return(s_number)
    return(3*magnitude(s_number[0]) + 2*magnitude(s_number[1]))


s_sum = []
for s_number_1 in s_numbers:
    for s_number_2 in s_numbers:
        if s_number_1 != s_number_2:
            c_number_1 = copy.deepcopy(s_number_1)
            c_number_2 = copy.deepcopy(s_number_2)
            s_sum.append(magnitude(add(c_number_1,c_number_2)))
    
print(max(s_sum))